View(A1_data.csv)
# 安装必要的包（如果尚未安装）
install.packages(c("mice", "VIM", "naniar", "DescTools"))
# 加载包
library(mice)    # 多重插补
library(VIM)     # 缺失值可视化
library(naniar)  # 缺失值分析
library(DescTools) # Winsorize处理
library(dplyr)   # 数据操作
# Load the data
data = read.csv("A1_data.csv")
# 检查整体缺失情况
cat("Total missing values:", sum(is.na(data)), "\n")
# 每列的缺失值数量
missing_counts <- colSums(is.na(data))
print(missing_counts)
View(data)
# 创建一个新的数据集，删除缺失值比例大于阈值的列
data_after_removeal <- data[, columns_to_keep]
# 使用data_after_removeal继续操作
new_missing_counts <- colSums(is.na(data_after_removeal))
print(new_missing_counts)
# 每列的缺失值数量
missing_counts <- colSums(is.na(data))
print(missing_counts)
# 计算每列缺失值的比例
missing_percentage <- missing_counts / nrow(data) * 100
# 将缺失值比例按降序排序
sorted_missing_percentage <- sort(missing_percentage, decreasing = TRUE)
# 查看每列缺失值的比例
sorted_missing_percentage
# 设置阈值（例如，删除缺失值比例超过30%的列）
threshold <- 42.881
# 获取缺失值比例小于或等于阈值的列
columns_to_keep <- names(missing_percentage[missing_percentage < threshold])
# 创建一个新的数据集，删除缺失值比例大于阈值的列
data_after_removeal <- data[, columns_to_keep]
# 使用data_after_removeal继续操作
new_missing_counts <- colSums(is.na(data_after_removeal))
print(new_missing_counts)
# 使用data_after_removeal继续操作
new_missing_counts <- colSums(is.na(data_after_removeal))
print(new_missing_counts)
new_sorted_missing_percentage <- sort(new_missing_counts, decreasing = TRUE)
new_sorted_missing_percentage
new_sorted_missing_col <- sort(new_missing_counts, decreasing = TRUE)
new_sorted_missing_col
# 获取数值型和类别型列
numeric_columns <- sapply(data_after_removeal, is.numeric)  # 数值型列
factor_columns <- sapply(data_after_removeal, is.factor)    # 类别型列
save.image("D:/hkuma/sem2/FFA/Assignment 1 (Due Date 13 Mar (Thu) 2359)-20250207/mid_data.RData")
numeric_columns
factor_columns
# 我们需要处理的列是真正有缺失值的列
missing_cols <- names(new_missing_counts[new_missing_counts > 0])
missing_cols
data_need_to_be_porcessed <- new_sorted_missing_col[, missing_cols]
# 创建一个新的数据集，删除缺失值比例大于阈值的列
data_after_removeal <- data[, columns_to_keep]
# 使用data_after_removeal继续操作
new_missing_counts <- colSums(is.na(data_after_removeal))
print(new_missing_counts)
new_sorted_missing_col <- sort(new_missing_counts, decreasing = TRUE)
new_sorted_missing_col
# 我们需要处理的列是真正有缺失值的列
missing_cols <- names(new_missing_counts[new_missing_counts > 0])
data_need_to_be_porcessed <- new_sorted_missing_col[, missing_cols]
# 我们需要处理的列是真正有缺失值的列
missing_cols <- names(new_missing_counts[new_missing_counts > 0])
data_need_to_be_porcessed <- data_after_removeal[, missing_cols]
# 获取数值型和类别型列
numeric_columns <- sapply(data_after_removeal, is.numeric)  # 数值型列
factor_columns <- sapply(data_after_removeal, is.factor)    # 类别型列
numeric_columns
factor_columns
View(data_need_to_be_porcessed)
data_need_to_be_porcessed <- data_after_removeal[, missing_cols]
View(data_need_to_be_porcessed)
colSums(is.na(data_need_to_be_porcessed))
colSums(is.na(data_need_to_be_porcessed))/ nrow(data_need_to_be_porcessed) * 100
sort(colSums(is.na(data_need_to_be_porcessed))/ nrow(data_need_to_be_porcessed) * 100)
sort(colSums(is.na(data_need_to_be_porcessed))/ nrow(data_need_to_be_porcessed) * 100, decreasing = TRUE)
# 检验缺失值比例小于5%的列的缺失情况是否为完全随机缺失（MCAR）
# 如果是的，则直接删除对应行数据
# 如果不是另做考虑
aggr_plot <- aggr(data_need_to_be_porcessed, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(data_need_to_be_porcessed), cex.axis = .7,
gap = 3, ylab = c("Missing data", "Pattern"))
# 加载包
library(mice)    # 多重插补
library(VIM)     # 缺失值可视化
library(naniar)  # 缺失值分析
library(DescTools) # Winsorize处理
library(dplyr)   # 数据操作
# 检验缺失值比例小于5%的列的缺失情况是否为完全随机缺失（MCAR）
# 如果是的，则直接删除对应行数据
# 如果不是另做考虑
aggr_plot <- aggr(data_need_to_be_porcessed, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(data_need_to_be_porcessed), cex.axis = .7,
gap = 3, ylab = c("Missing data", "Pattern"))
sort(colSums(is.na(data_need_to_be_porcessed))/ nrow(data_need_to_be_porcessed) * 100, decreasing = TRUE)
threshold_5 <- colSums(is.na(data_need_to_be_porcessed))/ nrow(data_need_to_be_porcessed) * 100
# 检验缺失值比例小于5%的列的缺失情况是否为完全随机缺失（MCAR）
# 如果是的，则直接删除对应行数据
# 如果不是另做考虑
temp_data <- data_after_removeal[,names(threshold_5[threshold_5 < 5])]
aggr_plot <- aggr(data_need_to_be_porcessed, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(data_need_to_be_porcessed), cex.axis = .7,
gap = 3, ylab = c("Missing data", "Pattern"))
View(temp_data)
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .7,
gap = 3, ylab = c("Missing data", "Pattern"))
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .5,
gap = 3, ylab = c("Missing data", "Pattern"))
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 3, ylab = c("Missing data", "Pattern"))
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 0, ylab = c("Missing data", "Pattern"))
# 使用data_after_removeal继续操作
new_missing_counts <- colSums(is.na(data_after_removeal))
print(new_missing_counts)
# 检验缺失值比例小于5%的列的缺失情况是否为完全随机缺失（MCAR）
# 如果是的，则直接删除对应行数据
# 如果不是另做考虑
temp_data <- data_after_removeal[,names(threshold_5[threshold_5 < 5])]
pdf("aggr_plot.pdf", width = 10, height = 10)
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 1, ylab = c("Missing data", "Pattern"))
dev.off()
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 1, ylab = c("Missing data", "Pattern"))
aggr_plot <- aggr(temp_data[1,5], col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 1, ylab = c("Missing data", "Pattern"))
aggr_plot <- aggr(temp_data[,7], col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 1, ylab = c("Missing data", "Pattern"))
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 1, ylab = c("Missing data", "Pattern"))
# 安装必要的包（如果尚未安装）
install.packages(c("mice", "VIM", "naniar", "DescTools", "BaylorEdPsych"))
library(BaylorEdPsych)
# 安装必要的包（如果尚未安装）
install.packages(c("mice", "VIM", "naniar", "DescTools"))
install.packages("BaylorEdPsych")
library(BaylorEdPsych)
# 加载包
library(mice)    # 多重插补
library(VIM)     # 缺失值可视化
library(naniar)  # 缺失值分析
library(DescTools) # Winsorize处理
library(dplyr)   # 数据操作
# 执行Little's MCAR Test
result <- LittleMCAR(temp_data)
print(result)
library(BaylorEdPsych)
# 安装必要的包（如果尚未安装）
install.packages(c("mice", "VIM", "naniar", "DescTools"))
aggr_plot <- aggr(temp_data, col = c('navyblue', 'red'),
numbers = TRUE, sortVars = TRUE,
labels = names(temp_data), cex.axis = .8,
gap = 1, ylab = c("Missing data", "Pattern"))
# 执行Little's MCAR Test
result <- LittleMCAR(temp_data)
sort(colSums(is.na(data_need_to_be_porcessed))/ nrow(data_need_to_be_porcessed) * 100, decreasing = TRUE)
# 安装并加载pheatmap
if (!requireNamespace("pheatmap", quietly = TRUE)) {
install.packages("pheatmap")
}
library(pheatmap)
target_vars <- c("id_13", "id_05", "id_06", "V310", "V311", "V312")
# 同样计算相关矩阵
cor_matrix <- cor(df[, target_vars], df, use = "complete.obs")
target_vars <- c("id_13", "id_05", "id_06", "V310", "V311", "V312")
# 同样计算相关矩阵
cor_matrix <- cor(data[, target_vars], data, use = "complete.obs")
# 使用pheatmap包进行可视化
pheatmap(cor_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
main = "Correlation Heatmap")
cor_matrix
target_vars <- c("id_13", "id_05", "id_06", "V310", "V311", "V312")
# 同样计算相关矩阵
cor_matrix <- cor(data[, target_vars], data, use = "complete.obs")
target_vars <- c("id_13", "id_05", "id_06")
# 同样计算相关矩阵
cor_matrix <- cor(data[, target_vars], data, use = "complete.obs")
View(data)
numeric_df <- data
numeric_df[] <- lapply(numeric_df, function(column) {
if (is.factor(column) || is.character(column)) {
as.numeric(as.character(column))
} else {
column
}
})
target_vars <- c("id_13", "id_05", "id_06")
# 同样计算相关矩阵
cor_matrix <- cor(numeric_df[, target_vars], numeric_df, use = "complete.obs")
str(numeric_df)
target_vars <- c("id_13", "id_05", "id_06")
numeric_df <- data[, sapply(data, is.numeric)]
# 检查剩余数值型数据
str(numeric_df)
# 这里假设你仍然只想计算特定的目标变量与所有其他数值变量之间的相关性。
# 过滤后的目标变量也是数值型的
numeric_target_vars <- intersect(target_vars, names(numeric_df))
# 计算相关矩阵
if (length(numeric_target_vars) > 0) {
cor_matrix <- cor(numeric_df[, numeric_target_vars], numeric_df, use = "complete.obs")
# 检查相关矩阵
print(cor_matrix)
# 进行可视化
# 使用pheatmap包进行可视化
if (!requireNamespace("pheatmap", quietly = TRUE)) {
install.packages("pheatmap")
}
library(pheatmap)
pheatmap(cor_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
display_numbers = TRUE,
main = "Correlation Heatmap")
} else {
cat("No numeric target variables found in the data.")
}
